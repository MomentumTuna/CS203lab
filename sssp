import java.io.*;
import java.util.*;

public class Main {
    public static void main(String[] args) throws Exception {
        QReader input=new QReader();
        QWriter out=new QWriter();
        int n=input.nextInt();
        int m=input.nextInt();
        node[] nodes=new node[n+1];
        for (int i = 1; i < nodes.length; i++) {
            node temp=new node(i);
            nodes[i]=temp;
        }
        for (int i = 0; i < m; i++) {
            int c=input.nextInt();
            int f=input.nextInt();
            int weight=input.nextInt();
            node father=nodes[f];
            node child=nodes[c];
            father.children.add(child);
            father.edgeweight.add(weight);
        }
        node root=nodes[input.nextInt()];
        root.value=0;
        ArrayList<node> heap=new ArrayList<>();
        node temp=new node(-1);
        heap.add(temp);
        for (int i = 1; i < n+1; i++) {
            heap.add(nodes[i]);
        }
        heap_sort(heap);
        sssp(heap);
        out.close();
    }

    public static void sssp(ArrayList<node> heap){
        node temp=heap.get(1);
        ArrayList<node> children=temp.children;
        ArrayList<Integer> edgeweight=temp.edgeweight;
        for (int i = 0; i < children.size(); i++) {
            node temp2=children.get(i);
            int weight=edgeweight.get(i);
            if(temp2.value>temp.value+weight){
                temp2.value=temp.value+weight;
                temp2.parent=temp;
            }
        }
        if(!isEmpty(heap)){
            delete_min(heap);
            sssp(heap);
        }
    }

    public static class node{
        ArrayList<Integer> edgeweight=new ArrayList<>();
        ArrayList<node> children=new ArrayList<>();
        node parent;
        int value=100000;
        int indix;

    public node(int indix){
            this.indix=indix;
        }
    }

    public static boolean isEmpty(ArrayList<node> heap){
        return heap.size()==2;
    }
    
    public static void delete_min(ArrayList<node> heap){
        node next=heap.get(heap.size()-1);
        heap.set(1,next);
        heap.remove(heap.size()-1);
        heap_sort(heap);
    }

    public static void rootfix(ArrayList<node> heap,int i){
        while(2*i<heap.size()){
            
            node parentN=heap.get(i);
            node lsonN=heap.get(2*i);
            if(2*i+1<heap.size()){
                
                node rsonN=heap.get(2*i+1);
                if(rsonN.value<lsonN.value){
                    if(parentN.value>rsonN.value){
                    heap.set(i,rsonN);
                    heap.set(2*i+1,parentN);
                    i=2*i+1;}else{break;}
                }else{
                    if(parentN.value>lsonN.value){
                    heap.set(i,lsonN);
                    heap.set(2*i,parentN);
                    i=2*i;}else{break;}
                }
            }else{
                if(parentN.value>lsonN.value){
                    heap.set(i,lsonN);
                    heap.set(2*i,parentN);
                    i=2*i;}else{break;}
            }
        }
    }

    public static void heap_sort(ArrayList<node> heap){
        for (int i = heap.size()-1; i>0; i--) {
            int indix=i;
            if(indix*2>heap.size()-1){continue;}else{
                rootfix(heap,i);
            }
        }
    }

}

class QReader {
    private BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));
    private StringTokenizer tokenizer = new StringTokenizer("");
 
    private String innerNextLine() {
        try {
            return reader.readLine();
        } catch (IOException e) {
            return null;
        }
    }
 
    public boolean hasNext() {
        while (!tokenizer.hasMoreTokens()) {
            String nextLine = innerNextLine();
            if (nextLine == null) {
                return false;
            }
            tokenizer = new StringTokenizer(nextLine);
        }
        return true;
    }
 
    public String nextLine() {
        tokenizer = new StringTokenizer("");
        return innerNextLine();
    }
 
    public String next() {
        hasNext();
        return tokenizer.nextToken();
    }
 
    public int nextInt() {
        return Integer.parseInt(next());
    }
 
    public long nextLong() {
        return Long.parseLong(next());
    }
}
 
class QWriter implements Closeable {
    private BufferedWriter writer = new BufferedWriter(new OutputStreamWriter(System.out));
 
    public void print(Object object) {
        try {
            writer.write(object.toString());
        } catch (IOException e) {
            return;
        }
    }
 
    public void println(Object object) {
        try {
            writer.write(object.toString());
            writer.write("\n");
        } catch (IOException e) {
            return;
        }
    }
 
    @Override
    public void close() {
        try {
            writer.close();
        } catch (IOException e) {
            return;
        }
    }
}
